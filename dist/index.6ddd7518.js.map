{"mappings":"AAAA,MAAM,YAAY;IAChB,aAAa,CAAC,QAAQ,UAAY;QAChC,MAAM,eAAe,OAAO,OAAO,CAAC;QACpC,MAAM,gBAAgB,aAAa,aAAa,CAAC;QACjD,cAAc,WAAW,GAAG;QAC5B,aAAa,SAAS,GAAG;IAC3B;IACA,eAAe,CAAC,SAAW;QACzB,MAAM,eAAe,OAAO,OAAO,CAAC;QACpC,aAAa,SAAS,GAAG;IAC3B;IACA,iBAAiB;QACf,UAAU;YACR,UAAU,CAAC,SAAW;gBACpB,OAAO,OAAO,KAAK,CAAC,MAAM,GAAG;YAC/B;YACA,SAAS,CAAC,SAAW,CAAC,EAAE,OAAO,IAAI,CAAC,iBAAiB,CAAC;QACxD;QACA,MAAM;YACJ,UAAU,CAAC,SAAW;gBACpB,OAAO,OAAO,KAAK,CAAC,MAAM,GAAG;YAC/B;YACA,SAAS,CAAC,SAAW,CAAC,EAAE,OAAO,IAAI,CAAC,iBAAiB,CAAC;QACxD;QACA,OAAO;YACL,UAAU,CAAC,SAAW;gBACpB,IAAI,QAAQ;gBACZ,OAAO,MAAM,IAAI,CAAC,OAAO,KAAK;YAChC;YACA,SAAS,IAAM,CAAC,oBAAoB,CAAC;QACvC;IACF;IACA,cAAc,CAAC,QAAU;QACvB,MAAM,UAAU,MAAM,gBAAgB,CAAC;QACvC,OAAO,UAAU,cAAc,CAAC;IAClC;IACA,gBAAgB,CAAC,UAAY;QAC3B,IAAI,oBAAoB,IAAI;QAC5B,QAAQ,OAAO,CAAC,CAAC,SAAW;YAC1B,MAAM,eAAe,UAAU,gBAAgB,CAAC;YAChD,qBAAqB;QACvB;QAEA,OAAO;IACT;IACA,kBAAkB,CAAC,SAAW;QAC5B,MAAM,SAAS;QACf,IAAI,mBAAmB,IAAI;QAC3B,MAAM,qBAAqB,OAAO,OAAO,CAAC,OAAO;QAEjD,IAAI,oBAAoB;YACtB,MAAM,QAAQ,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;YAC3C,MAAM,OAAO,CAAC,CAAC,OAAS;gBACtB,IAAI;oBACF,oBAAoB,UAAU,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC;oBAC7D,IAAI,CAAC,kBACH,UAAU,WAAW,CACnB,QACA,UAAU,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC;gBAG9C,EAAE,OAAO,OAAO;oBACd,MAAM,IAAI,MACR,sDACA,OACA;gBACJ;YACF;QACF,CAAC;QAED,IAAI,kBACF,UAAU,aAAa,CAAC;QAE1B,OAAO;IACT;AACF","sources":["js/validator.js"],"sourcesContent":["const validator = {\r\n  setErrorFor: ($input, message) => {\r\n    const $formControl = $input.closest(\".form-control\");\r\n    const $messageError = $formControl.querySelector(\".message-error\");\r\n    $messageError.textContent = message;\r\n    $formControl.className = \"form-control error\";\r\n  },\r\n  setSuccessFor: ($input) => {\r\n    const $formControl = $input.closest(\".form-control\");\r\n    $formControl.className = \"form-control success\";\r\n  },\r\n  validatorByType: {\r\n    required: {\r\n      validate: ($input) => {\r\n        return $input.value.length > 0;\r\n      },\r\n      message: ($input) => `${$input.name} cannot be blank.`,\r\n    },\r\n    name: {\r\n      validate: ($input) => {\r\n        return $input.value.length > 0;\r\n      },\r\n      message: ($input) => `${$input.name} cannot be blank.`,\r\n    },\r\n    email: {\r\n      validate: ($input) => {\r\n        var regex = /\\S+@\\S+\\.\\S+/;\r\n        return regex.test($input.value);\r\n      },\r\n      message: () => `Invalid email format`,\r\n    },\r\n  },\r\n  validateForm: ($form) => {\r\n    const $inputs = $form.querySelectorAll(\"input\");\r\n    return validator.validateInputs($inputs);\r\n  },\r\n  validateInputs: ($inputs) => {\r\n    let areAllInputsValid = true;\r\n    $inputs.forEach(($input) => {\r\n      const isValidInput = validator.validateEachStep($input);\r\n      areAllInputsValid &= isValidInput;\r\n    });\r\n\r\n    return areAllInputsValid;\r\n  },\r\n  validateEachStep: ($input) => {\r\n    const VT_KEY = \"vtValidations\";\r\n    let allStepsAreValid = true;\r\n    const hasStepsToValidate = $input.dataset[VT_KEY];\r\n\r\n    if (hasStepsToValidate) {\r\n      const steps = $input.dataset[VT_KEY].split(\"|\");\r\n      steps.forEach((type) => {\r\n        try {\r\n          allStepsAreValid &= validator.validatorByType[type].validate($input);\r\n          if (!allStepsAreValid) {\r\n            validator.setErrorFor(\r\n              $input,\r\n              validator.validatorByType[type].message($input)\r\n            );\r\n          }\r\n        } catch (error) {\r\n          throw new Error(\r\n            \"Ops, aconteceu um erro na validação do campo\",\r\n            error\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    if (allStepsAreValid) {\r\n      validator.setSuccessFor($input);\r\n    }\r\n    return allStepsAreValid;\r\n  },\r\n};\r\n"],"names":[],"version":3,"file":"index.6ddd7518.js.map","sourceRoot":"/__parcel_source_root/"}